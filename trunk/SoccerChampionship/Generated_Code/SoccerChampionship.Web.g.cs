//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoccerChampionship
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using SoccerChampionship.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace SoccerChampionship.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using SoccerChampionship.Web.Resources;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationService' domain service.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("SoccerChampionship-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class Category : Entity
    {
        
        private int _id;
        
        private string _name;
        
        private EntityCollection<Team> _team;
        
        private EntityCollection<Tournament> _tournament;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Team"/> entities.
        /// </summary>
        [Association("Category_Team", "Id", "CategoryID")]
        [XmlIgnore()]
        public EntityCollection<Team> Team
        {
            get
            {
                if ((this._team == null))
                {
                    this._team = new EntityCollection<Team>(this, "Team", this.FilterTeam, this.AttachTeam, this.DetachTeam);
                }
                return this._team;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Tournament"/> entities.
        /// </summary>
        [Association("Category_Tournament", "Id", "CategoryID")]
        [XmlIgnore()]
        public EntityCollection<Tournament> Tournament
        {
            get
            {
                if ((this._tournament == null))
                {
                    this._tournament = new EntityCollection<Tournament>(this, "Tournament", this.FilterTournament, this.AttachTournament, this.DetachTournament);
                }
                return this._tournament;
            }
        }
        
        private void AttachTeam(Team entity)
        {
            entity.Category = this;
        }
        
        private void DetachTeam(Team entity)
        {
            entity.Category = null;
        }
        
        private bool FilterTeam(Team entity)
        {
            return (entity.CategoryID == this.Id);
        }
        
        private void AttachTournament(Tournament entity)
        {
            entity.Category = this;
        }
        
        private void DetachTournament(Tournament entity)
        {
            entity.Category = null;
        }
        
        private bool FilterTournament(Tournament entity)
        {
            return (entity.CategoryID == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'Game' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class Game : Entity
    {
        
        private EntityRef<GameDay> _gameDay;
        
        private int _gameDayID;
        
        private EntityCollection<GamePayments> _gamePayments;
        
        private int _id;
        
        private DateTime _startTime;
        
        private EntityRef<Team> _team;
        
        private EntityRef<Team> _team1;
        
        private int _team1ID;
        
        private int _team2ID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnGameDayIDChanging(int value);
        partial void OnGameDayIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();
        partial void OnTeam1IDChanging(int value);
        partial void OnTeam1IDChanged();
        partial void OnTeam2IDChanging(int value);
        partial void OnTeam2IDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Game"/> class.
        /// </summary>
        public Game()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GameDay"/> entity.
        /// </summary>
        [Association("GameDay_Game", "GameDayID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public GameDay GameDay
        {
            get
            {
                if ((this._gameDay == null))
                {
                    this._gameDay = new EntityRef<GameDay>(this, "GameDay", this.FilterGameDay);
                }
                return this._gameDay.Entity;
            }
            set
            {
                GameDay previous = this.GameDay;
                if ((previous != value))
                {
                    this.ValidateProperty("GameDay", value);
                    if ((previous != null))
                    {
                        this._gameDay.Entity = null;
                        previous.Game.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GameDayID = value.ID;
                    }
                    else
                    {
                        this.GameDayID = default(int);
                    }
                    this._gameDay.Entity = value;
                    if ((value != null))
                    {
                        value.Game.Add(this);
                    }
                    this.RaisePropertyChanged("GameDay");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GameDayID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int GameDayID
        {
            get
            {
                return this._gameDayID;
            }
            set
            {
                if ((this._gameDayID != value))
                {
                    this.OnGameDayIDChanging(value);
                    this.RaiseDataMemberChanging("GameDayID");
                    this.ValidateProperty("GameDayID", value);
                    this._gameDayID = value;
                    this.RaiseDataMemberChanged("GameDayID");
                    this.OnGameDayIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="GamePayments"/> entities.
        /// </summary>
        [Association("Game_GamePayments", "ID", "GameID")]
        [XmlIgnore()]
        public EntityCollection<GamePayments> GamePayments
        {
            get
            {
                if ((this._gamePayments == null))
                {
                    this._gamePayments = new EntityCollection<GamePayments>(this, "GamePayments", this.FilterGamePayments, this.AttachGamePayments, this.DetachGamePayments);
                }
                return this._gamePayments;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartTime' value.
        /// </summary>
        [DataMember()]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Team"/> entity.
        /// </summary>
        [Association("Team_Game", "Team1ID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Team Team
        {
            get
            {
                if ((this._team == null))
                {
                    this._team = new EntityRef<Team>(this, "Team", this.FilterTeam);
                }
                return this._team.Entity;
            }
            set
            {
                Team previous = this.Team;
                if ((previous != value))
                {
                    this.ValidateProperty("Team", value);
                    if ((previous != null))
                    {
                        this._team.Entity = null;
                        previous.Game.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Team1ID = value.ID;
                    }
                    else
                    {
                        this.Team1ID = default(int);
                    }
                    this._team.Entity = value;
                    if ((value != null))
                    {
                        value.Game.Add(this);
                    }
                    this.RaisePropertyChanged("Team");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Team"/> entity.
        /// </summary>
        [Association("Team_Game1", "Team2ID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Team Team1
        {
            get
            {
                if ((this._team1 == null))
                {
                    this._team1 = new EntityRef<Team>(this, "Team1", this.FilterTeam1);
                }
                return this._team1.Entity;
            }
            set
            {
                Team previous = this.Team1;
                if ((previous != value))
                {
                    this.ValidateProperty("Team1", value);
                    if ((previous != null))
                    {
                        this._team1.Entity = null;
                        previous.Game1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Team2ID = value.ID;
                    }
                    else
                    {
                        this.Team2ID = default(int);
                    }
                    this._team1.Entity = value;
                    if ((value != null))
                    {
                        value.Game1.Add(this);
                    }
                    this.RaisePropertyChanged("Team1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Team1ID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int Team1ID
        {
            get
            {
                return this._team1ID;
            }
            set
            {
                if ((this._team1ID != value))
                {
                    this.OnTeam1IDChanging(value);
                    this.RaiseDataMemberChanging("Team1ID");
                    this.ValidateProperty("Team1ID", value);
                    this._team1ID = value;
                    this.RaiseDataMemberChanged("Team1ID");
                    this.OnTeam1IDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Team2ID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int Team2ID
        {
            get
            {
                return this._team2ID;
            }
            set
            {
                if ((this._team2ID != value))
                {
                    this.OnTeam2IDChanging(value);
                    this.RaiseDataMemberChanging("Team2ID");
                    this.ValidateProperty("Team2ID", value);
                    this._team2ID = value;
                    this.RaiseDataMemberChanged("Team2ID");
                    this.OnTeam2IDChanged();
                }
            }
        }
        
        private bool FilterGameDay(GameDay entity)
        {
            return (entity.ID == this.GameDayID);
        }
        
        private void AttachGamePayments(GamePayments entity)
        {
            entity.Game = this;
        }
        
        private void DetachGamePayments(GamePayments entity)
        {
            entity.Game = null;
        }
        
        private bool FilterGamePayments(GamePayments entity)
        {
            return (entity.GameID == this.ID);
        }
        
        private bool FilterTeam(Team entity)
        {
            return (entity.ID == this.Team1ID);
        }
        
        private bool FilterTeam1(Team entity)
        {
            return (entity.ID == this.Team2ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'GameDay' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class GameDay : Entity
    {
        
        private EntityCollection<Game> _game;
        
        private decimal _gameAmount;
        
        private DateTime _gameDate;
        
        private int _id;
        
        private EntityCollection<PlayerStatics> _playerStatics;
        
        private EntityRef<Tournament> _tournament;
        
        private int _tournamentID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnGameAmountChanging(decimal value);
        partial void OnGameAmountChanged();
        partial void OnGameDateChanging(DateTime value);
        partial void OnGameDateChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnTournamentIDChanging(int value);
        partial void OnTournamentIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GameDay"/> class.
        /// </summary>
        public GameDay()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Game"/> entities.
        /// </summary>
        [Association("GameDay_Game", "ID", "GameDayID")]
        [XmlIgnore()]
        public EntityCollection<Game> Game
        {
            get
            {
                if ((this._game == null))
                {
                    this._game = new EntityCollection<Game>(this, "Game", this.FilterGame, this.AttachGame, this.DetachGame);
                }
                return this._game;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GameAmount' value.
        /// </summary>
        [DataMember()]
        public decimal GameAmount
        {
            get
            {
                return this._gameAmount;
            }
            set
            {
                if ((this._gameAmount != value))
                {
                    this.OnGameAmountChanging(value);
                    this.RaiseDataMemberChanging("GameAmount");
                    this.ValidateProperty("GameAmount", value);
                    this._gameAmount = value;
                    this.RaiseDataMemberChanged("GameAmount");
                    this.OnGameAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GameDate' value.
        /// </summary>
        [DataMember()]
        public DateTime GameDate
        {
            get
            {
                return this._gameDate;
            }
            set
            {
                if ((this._gameDate != value))
                {
                    this.OnGameDateChanging(value);
                    this.RaiseDataMemberChanging("GameDate");
                    this.ValidateProperty("GameDate", value);
                    this._gameDate = value;
                    this.RaiseDataMemberChanged("GameDate");
                    this.OnGameDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PlayerStatics"/> entities.
        /// </summary>
        [Association("GameDay_PlayerStatics", "ID", "GameDayID")]
        [XmlIgnore()]
        public EntityCollection<PlayerStatics> PlayerStatics
        {
            get
            {
                if ((this._playerStatics == null))
                {
                    this._playerStatics = new EntityCollection<PlayerStatics>(this, "PlayerStatics", this.FilterPlayerStatics, this.AttachPlayerStatics, this.DetachPlayerStatics);
                }
                return this._playerStatics;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Tournament"/> entity.
        /// </summary>
        [Association("Tournament_GameDay", "TournamentID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Tournament Tournament
        {
            get
            {
                if ((this._tournament == null))
                {
                    this._tournament = new EntityRef<Tournament>(this, "Tournament", this.FilterTournament);
                }
                return this._tournament.Entity;
            }
            set
            {
                Tournament previous = this.Tournament;
                if ((previous != value))
                {
                    this.ValidateProperty("Tournament", value);
                    if ((previous != null))
                    {
                        this._tournament.Entity = null;
                        previous.GameDay.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TournamentID = value.ID;
                    }
                    else
                    {
                        this.TournamentID = default(int);
                    }
                    this._tournament.Entity = value;
                    if ((value != null))
                    {
                        value.GameDay.Add(this);
                    }
                    this.RaisePropertyChanged("Tournament");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TournamentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TournamentID
        {
            get
            {
                return this._tournamentID;
            }
            set
            {
                if ((this._tournamentID != value))
                {
                    this.OnTournamentIDChanging(value);
                    this.RaiseDataMemberChanging("TournamentID");
                    this.ValidateProperty("TournamentID", value);
                    this._tournamentID = value;
                    this.RaiseDataMemberChanged("TournamentID");
                    this.OnTournamentIDChanged();
                }
            }
        }
        
        private void AttachGame(Game entity)
        {
            entity.GameDay = this;
        }
        
        private void DetachGame(Game entity)
        {
            entity.GameDay = null;
        }
        
        private bool FilterGame(Game entity)
        {
            return (entity.GameDayID == this.ID);
        }
        
        private void AttachPlayerStatics(PlayerStatics entity)
        {
            entity.GameDay = this;
        }
        
        private void DetachPlayerStatics(PlayerStatics entity)
        {
            entity.GameDay = null;
        }
        
        private bool FilterPlayerStatics(PlayerStatics entity)
        {
            return (entity.GameDayID == this.ID);
        }
        
        private bool FilterTournament(Tournament entity)
        {
            return (entity.ID == this.TournamentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'GamePayments' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class GamePayments : Entity
    {
        
        private EntityRef<Game> _game;
        
        private int _gameID;
        
        private int _id;
        
        private DateTime _paidDate;
        
        private EntityRef<Team> _team;
        
        private int _teamID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnGameIDChanging(int value);
        partial void OnGameIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPaidDateChanging(DateTime value);
        partial void OnPaidDateChanged();
        partial void OnTeamIDChanging(int value);
        partial void OnTeamIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GamePayments"/> class.
        /// </summary>
        public GamePayments()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Game"/> entity.
        /// </summary>
        [Association("Game_GamePayments", "GameID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Game Game
        {
            get
            {
                if ((this._game == null))
                {
                    this._game = new EntityRef<Game>(this, "Game", this.FilterGame);
                }
                return this._game.Entity;
            }
            set
            {
                Game previous = this.Game;
                if ((previous != value))
                {
                    this.ValidateProperty("Game", value);
                    if ((previous != null))
                    {
                        this._game.Entity = null;
                        previous.GamePayments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GameID = value.ID;
                    }
                    else
                    {
                        this.GameID = default(int);
                    }
                    this._game.Entity = value;
                    if ((value != null))
                    {
                        value.GamePayments.Add(this);
                    }
                    this.RaisePropertyChanged("Game");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GameID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int GameID
        {
            get
            {
                return this._gameID;
            }
            set
            {
                if ((this._gameID != value))
                {
                    this.OnGameIDChanging(value);
                    this.RaiseDataMemberChanging("GameID");
                    this.ValidateProperty("GameID", value);
                    this._gameID = value;
                    this.RaiseDataMemberChanged("GameID");
                    this.OnGameIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PaidDate' value.
        /// </summary>
        [DataMember()]
        public DateTime PaidDate
        {
            get
            {
                return this._paidDate;
            }
            set
            {
                if ((this._paidDate != value))
                {
                    this.OnPaidDateChanging(value);
                    this.RaiseDataMemberChanging("PaidDate");
                    this.ValidateProperty("PaidDate", value);
                    this._paidDate = value;
                    this.RaiseDataMemberChanged("PaidDate");
                    this.OnPaidDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Team"/> entity.
        /// </summary>
        [Association("Team_GamePayments", "TeamID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Team Team
        {
            get
            {
                if ((this._team == null))
                {
                    this._team = new EntityRef<Team>(this, "Team", this.FilterTeam);
                }
                return this._team.Entity;
            }
            set
            {
                Team previous = this.Team;
                if ((previous != value))
                {
                    this.ValidateProperty("Team", value);
                    if ((previous != null))
                    {
                        this._team.Entity = null;
                        previous.GamePayments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TeamID = value.ID;
                    }
                    else
                    {
                        this.TeamID = default(int);
                    }
                    this._team.Entity = value;
                    if ((value != null))
                    {
                        value.GamePayments.Add(this);
                    }
                    this.RaisePropertyChanged("Team");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TeamID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TeamID
        {
            get
            {
                return this._teamID;
            }
            set
            {
                if ((this._teamID != value))
                {
                    this.OnTeamIDChanging(value);
                    this.RaiseDataMemberChanging("TeamID");
                    this.ValidateProperty("TeamID", value);
                    this._teamID = value;
                    this.RaiseDataMemberChanged("TeamID");
                    this.OnTeamIDChanged();
                }
            }
        }
        
        private bool FilterGame(Game entity)
        {
            return (entity.ID == this.GameID);
        }
        
        private bool FilterTeam(Team entity)
        {
            return (entity.ID == this.TeamID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Player' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class Player : Entity
    {
        
        private string _address;
        
        private int _dni;
        
        private int _id;
        
        private string _mail;
        
        private string _name;
        
        private string _phone;
        
        private EntityCollection<PlayerStatics> _playerStatics;
        
        private EntityRef<Team> _team;
        
        private int _teamID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnDniChanging(int value);
        partial void OnDniChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnMailChanging(string value);
        partial void OnMailChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnTeamIDChanging(int value);
        partial void OnTeamIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Player"/> class.
        /// </summary>
        public Player()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dni' value.
        /// </summary>
        [DataMember()]
        public int Dni
        {
            get
            {
                return this._dni;
            }
            set
            {
                if ((this._dni != value))
                {
                    this.OnDniChanging(value);
                    this.RaiseDataMemberChanging("Dni");
                    this.ValidateProperty("Dni", value);
                    this._dni = value;
                    this.RaiseDataMemberChanged("Dni");
                    this.OnDniChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mail' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Mail
        {
            get
            {
                return this._mail;
            }
            set
            {
                if ((this._mail != value))
                {
                    this.OnMailChanging(value);
                    this.RaiseDataMemberChanging("Mail");
                    this.ValidateProperty("Mail", value);
                    this._mail = value;
                    this.RaiseDataMemberChanged("Mail");
                    this.OnMailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PlayerStatics"/> entities.
        /// </summary>
        [Association("Player_PlayerStatics", "ID", "PlayerID")]
        [XmlIgnore()]
        public EntityCollection<PlayerStatics> PlayerStatics
        {
            get
            {
                if ((this._playerStatics == null))
                {
                    this._playerStatics = new EntityCollection<PlayerStatics>(this, "PlayerStatics", this.FilterPlayerStatics, this.AttachPlayerStatics, this.DetachPlayerStatics);
                }
                return this._playerStatics;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Team"/> entity.
        /// </summary>
        [Association("Team_Player", "TeamID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Team Team
        {
            get
            {
                if ((this._team == null))
                {
                    this._team = new EntityRef<Team>(this, "Team", this.FilterTeam);
                }
                return this._team.Entity;
            }
            set
            {
                Team previous = this.Team;
                if ((previous != value))
                {
                    this.ValidateProperty("Team", value);
                    if ((previous != null))
                    {
                        this._team.Entity = null;
                        previous.Player.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TeamID = value.ID;
                    }
                    else
                    {
                        this.TeamID = default(int);
                    }
                    this._team.Entity = value;
                    if ((value != null))
                    {
                        value.Player.Add(this);
                    }
                    this.RaisePropertyChanged("Team");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TeamID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TeamID
        {
            get
            {
                return this._teamID;
            }
            set
            {
                if ((this._teamID != value))
                {
                    this.OnTeamIDChanging(value);
                    this.RaiseDataMemberChanging("TeamID");
                    this.ValidateProperty("TeamID", value);
                    this._teamID = value;
                    this.RaiseDataMemberChanged("TeamID");
                    this.OnTeamIDChanged();
                }
            }
        }
        
        private void AttachPlayerStatics(PlayerStatics entity)
        {
            entity.Player = this;
        }
        
        private void DetachPlayerStatics(PlayerStatics entity)
        {
            entity.Player = null;
        }
        
        private bool FilterPlayerStatics(PlayerStatics entity)
        {
            return (entity.PlayerID == this.ID);
        }
        
        private bool FilterTeam(Team entity)
        {
            return (entity.ID == this.TeamID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PlayerStatics' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class PlayerStatics : Entity
    {
        
        private EntityRef<GameDay> _gameDay;
        
        private int _gameDayID;
        
        private int _goals;
        
        private int _id;
        
        private EntityRef<Player> _player;
        
        private int _playerID;
        
        private int _redCard;
        
        private int _yellowCards;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnGameDayIDChanging(int value);
        partial void OnGameDayIDChanged();
        partial void OnGoalsChanging(int value);
        partial void OnGoalsChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPlayerIDChanging(int value);
        partial void OnPlayerIDChanged();
        partial void OnRedCardChanging(int value);
        partial void OnRedCardChanged();
        partial void OnYellowCardsChanging(int value);
        partial void OnYellowCardsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerStatics"/> class.
        /// </summary>
        public PlayerStatics()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GameDay"/> entity.
        /// </summary>
        [Association("GameDay_PlayerStatics", "GameDayID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public GameDay GameDay
        {
            get
            {
                if ((this._gameDay == null))
                {
                    this._gameDay = new EntityRef<GameDay>(this, "GameDay", this.FilterGameDay);
                }
                return this._gameDay.Entity;
            }
            set
            {
                GameDay previous = this.GameDay;
                if ((previous != value))
                {
                    this.ValidateProperty("GameDay", value);
                    if ((previous != null))
                    {
                        this._gameDay.Entity = null;
                        previous.PlayerStatics.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GameDayID = value.ID;
                    }
                    else
                    {
                        this.GameDayID = default(int);
                    }
                    this._gameDay.Entity = value;
                    if ((value != null))
                    {
                        value.PlayerStatics.Add(this);
                    }
                    this.RaisePropertyChanged("GameDay");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GameDayID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int GameDayID
        {
            get
            {
                return this._gameDayID;
            }
            set
            {
                if ((this._gameDayID != value))
                {
                    this.OnGameDayIDChanging(value);
                    this.RaiseDataMemberChanging("GameDayID");
                    this.ValidateProperty("GameDayID", value);
                    this._gameDayID = value;
                    this.RaiseDataMemberChanged("GameDayID");
                    this.OnGameDayIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Goals' value.
        /// </summary>
        [DataMember()]
        public int Goals
        {
            get
            {
                return this._goals;
            }
            set
            {
                if ((this._goals != value))
                {
                    this.OnGoalsChanging(value);
                    this.RaiseDataMemberChanging("Goals");
                    this.ValidateProperty("Goals", value);
                    this._goals = value;
                    this.RaiseDataMemberChanged("Goals");
                    this.OnGoalsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Player"/> entity.
        /// </summary>
        [Association("Player_PlayerStatics", "PlayerID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Player Player
        {
            get
            {
                if ((this._player == null))
                {
                    this._player = new EntityRef<Player>(this, "Player", this.FilterPlayer);
                }
                return this._player.Entity;
            }
            set
            {
                Player previous = this.Player;
                if ((previous != value))
                {
                    this.ValidateProperty("Player", value);
                    if ((previous != null))
                    {
                        this._player.Entity = null;
                        previous.PlayerStatics.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PlayerID = value.ID;
                    }
                    else
                    {
                        this.PlayerID = default(int);
                    }
                    this._player.Entity = value;
                    if ((value != null))
                    {
                        value.PlayerStatics.Add(this);
                    }
                    this.RaisePropertyChanged("Player");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlayerID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PlayerID
        {
            get
            {
                return this._playerID;
            }
            set
            {
                if ((this._playerID != value))
                {
                    this.OnPlayerIDChanging(value);
                    this.RaiseDataMemberChanging("PlayerID");
                    this.ValidateProperty("PlayerID", value);
                    this._playerID = value;
                    this.RaiseDataMemberChanged("PlayerID");
                    this.OnPlayerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RedCard' value.
        /// </summary>
        [DataMember()]
        public int RedCard
        {
            get
            {
                return this._redCard;
            }
            set
            {
                if ((this._redCard != value))
                {
                    this.OnRedCardChanging(value);
                    this.RaiseDataMemberChanging("RedCard");
                    this.ValidateProperty("RedCard", value);
                    this._redCard = value;
                    this.RaiseDataMemberChanged("RedCard");
                    this.OnRedCardChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YellowCards' value.
        /// </summary>
        [DataMember()]
        public int YellowCards
        {
            get
            {
                return this._yellowCards;
            }
            set
            {
                if ((this._yellowCards != value))
                {
                    this.OnYellowCardsChanging(value);
                    this.RaiseDataMemberChanging("YellowCards");
                    this.ValidateProperty("YellowCards", value);
                    this._yellowCards = value;
                    this.RaiseDataMemberChanged("YellowCards");
                    this.OnYellowCardsChanged();
                }
            }
        }
        
        private bool FilterGameDay(GameDay entity)
        {
            return (entity.ID == this.GameDayID);
        }
        
        private bool FilterPlayer(Player entity)
        {
            return (entity.ID == this.PlayerID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'RegistrationPayments' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class RegistrationPayments : Entity
    {
        
        private int _id;
        
        private DateTime _paidDate;
        
        private EntityRef<Team> _team;
        
        private int _teamID;
        
        private EntityRef<Tournament> _tournament;
        
        private int _tournamentID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPaidDateChanging(DateTime value);
        partial void OnPaidDateChanged();
        partial void OnTeamIDChanging(int value);
        partial void OnTeamIDChanged();
        partial void OnTournamentIDChanging(int value);
        partial void OnTournamentIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationPayments"/> class.
        /// </summary>
        public RegistrationPayments()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PaidDate' value.
        /// </summary>
        [DataMember()]
        public DateTime PaidDate
        {
            get
            {
                return this._paidDate;
            }
            set
            {
                if ((this._paidDate != value))
                {
                    this.OnPaidDateChanging(value);
                    this.RaiseDataMemberChanging("PaidDate");
                    this.ValidateProperty("PaidDate", value);
                    this._paidDate = value;
                    this.RaiseDataMemberChanged("PaidDate");
                    this.OnPaidDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Team"/> entity.
        /// </summary>
        [Association("Team_RegistrationPayments", "TeamID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Team Team
        {
            get
            {
                if ((this._team == null))
                {
                    this._team = new EntityRef<Team>(this, "Team", this.FilterTeam);
                }
                return this._team.Entity;
            }
            set
            {
                Team previous = this.Team;
                if ((previous != value))
                {
                    this.ValidateProperty("Team", value);
                    if ((previous != null))
                    {
                        this._team.Entity = null;
                        previous.RegistrationPayments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TeamID = value.ID;
                    }
                    else
                    {
                        this.TeamID = default(int);
                    }
                    this._team.Entity = value;
                    if ((value != null))
                    {
                        value.RegistrationPayments.Add(this);
                    }
                    this.RaisePropertyChanged("Team");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TeamID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TeamID
        {
            get
            {
                return this._teamID;
            }
            set
            {
                if ((this._teamID != value))
                {
                    this.OnTeamIDChanging(value);
                    this.RaiseDataMemberChanging("TeamID");
                    this.ValidateProperty("TeamID", value);
                    this._teamID = value;
                    this.RaiseDataMemberChanged("TeamID");
                    this.OnTeamIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Tournament"/> entity.
        /// </summary>
        [Association("Tournament_RegistrationPayments", "TournamentID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Tournament Tournament
        {
            get
            {
                if ((this._tournament == null))
                {
                    this._tournament = new EntityRef<Tournament>(this, "Tournament", this.FilterTournament);
                }
                return this._tournament.Entity;
            }
            set
            {
                Tournament previous = this.Tournament;
                if ((previous != value))
                {
                    this.ValidateProperty("Tournament", value);
                    if ((previous != null))
                    {
                        this._tournament.Entity = null;
                        previous.RegistrationPayments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TournamentID = value.ID;
                    }
                    else
                    {
                        this.TournamentID = default(int);
                    }
                    this._tournament.Entity = value;
                    if ((value != null))
                    {
                        value.RegistrationPayments.Add(this);
                    }
                    this.RaisePropertyChanged("Tournament");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TournamentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TournamentID
        {
            get
            {
                return this._tournamentID;
            }
            set
            {
                if ((this._tournamentID != value))
                {
                    this.OnTournamentIDChanging(value);
                    this.RaiseDataMemberChanging("TournamentID");
                    this.ValidateProperty("TournamentID", value);
                    this._tournamentID = value;
                    this.RaiseDataMemberChanged("TournamentID");
                    this.OnTournamentIDChanged();
                }
            }
        }
        
        private bool FilterTeam(Team entity)
        {
            return (entity.ID == this.TeamID);
        }
        
        private bool FilterTournament(Tournament entity)
        {
            return (entity.ID == this.TournamentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Team' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class Team : Entity
    {
        
        private EntityRef<Category> _category;
        
        private int _categoryID;
        
        private EntityCollection<Game> _game;
        
        private EntityCollection<Game> _game1;
        
        private EntityCollection<GamePayments> _gamePayments;
        
        private int _id;
        
        private string _name;
        
        private EntityCollection<Player> _player;
        
        private EntityCollection<RegistrationPayments> _registrationPayments;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Team"/> class.
        /// </summary>
        public Team()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_Team", "CategoryID", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.Team.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.Id;
                    }
                    else
                    {
                        this.CategoryID = default(int);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.Team.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Game"/> entities.
        /// </summary>
        [Association("Team_Game", "ID", "Team1ID")]
        [XmlIgnore()]
        public EntityCollection<Game> Game
        {
            get
            {
                if ((this._game == null))
                {
                    this._game = new EntityCollection<Game>(this, "Game", this.FilterGame, this.AttachGame, this.DetachGame);
                }
                return this._game;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Game"/> entities.
        /// </summary>
        [Association("Team_Game1", "ID", "Team2ID")]
        [XmlIgnore()]
        public EntityCollection<Game> Game1
        {
            get
            {
                if ((this._game1 == null))
                {
                    this._game1 = new EntityCollection<Game>(this, "Game1", this.FilterGame1, this.AttachGame1, this.DetachGame1);
                }
                return this._game1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="GamePayments"/> entities.
        /// </summary>
        [Association("Team_GamePayments", "ID", "TeamID")]
        [XmlIgnore()]
        public EntityCollection<GamePayments> GamePayments
        {
            get
            {
                if ((this._gamePayments == null))
                {
                    this._gamePayments = new EntityCollection<GamePayments>(this, "GamePayments", this.FilterGamePayments, this.AttachGamePayments, this.DetachGamePayments);
                }
                return this._gamePayments;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Player"/> entities.
        /// </summary>
        [Association("Team_Player", "ID", "TeamID")]
        [XmlIgnore()]
        public EntityCollection<Player> Player
        {
            get
            {
                if ((this._player == null))
                {
                    this._player = new EntityCollection<Player>(this, "Player", this.FilterPlayer, this.AttachPlayer, this.DetachPlayer);
                }
                return this._player;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RegistrationPayments"/> entities.
        /// </summary>
        [Association("Team_RegistrationPayments", "ID", "TeamID")]
        [XmlIgnore()]
        public EntityCollection<RegistrationPayments> RegistrationPayments
        {
            get
            {
                if ((this._registrationPayments == null))
                {
                    this._registrationPayments = new EntityCollection<RegistrationPayments>(this, "RegistrationPayments", this.FilterRegistrationPayments, this.AttachRegistrationPayments, this.DetachRegistrationPayments);
                }
                return this._registrationPayments;
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.Id == this.CategoryID);
        }
        
        private void AttachGame(Game entity)
        {
            entity.Team = this;
        }
        
        private void DetachGame(Game entity)
        {
            entity.Team = null;
        }
        
        private bool FilterGame(Game entity)
        {
            return (entity.Team1ID == this.ID);
        }
        
        private void AttachGame1(Game entity)
        {
            entity.Team1 = this;
        }
        
        private void DetachGame1(Game entity)
        {
            entity.Team1 = null;
        }
        
        private bool FilterGame1(Game entity)
        {
            return (entity.Team2ID == this.ID);
        }
        
        private void AttachGamePayments(GamePayments entity)
        {
            entity.Team = this;
        }
        
        private void DetachGamePayments(GamePayments entity)
        {
            entity.Team = null;
        }
        
        private bool FilterGamePayments(GamePayments entity)
        {
            return (entity.TeamID == this.ID);
        }
        
        private void AttachPlayer(Player entity)
        {
            entity.Team = this;
        }
        
        private void DetachPlayer(Player entity)
        {
            entity.Team = null;
        }
        
        private bool FilterPlayer(Player entity)
        {
            return (entity.TeamID == this.ID);
        }
        
        private void AttachRegistrationPayments(RegistrationPayments entity)
        {
            entity.Team = this;
        }
        
        private void DetachRegistrationPayments(RegistrationPayments entity)
        {
            entity.Team = null;
        }
        
        private bool FilterRegistrationPayments(RegistrationPayments entity)
        {
            return (entity.TeamID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Tournament' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class Tournament : Entity
    {
        
        private EntityRef<Category> _category;
        
        private int _categoryID;
        
        private EntityCollection<GameDay> _gameDay;
        
        private int _id;
        
        private string _name;
        
        private decimal _registrationAmount;
        
        private EntityCollection<RegistrationPayments> _registrationPayments;
        
        private DateTime _startDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRegistrationAmountChanging(decimal value);
        partial void OnRegistrationAmountChanged();
        partial void OnStartDateChanging(DateTime value);
        partial void OnStartDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Tournament"/> class.
        /// </summary>
        public Tournament()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_Tournament", "CategoryID", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.Tournament.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.Id;
                    }
                    else
                    {
                        this.CategoryID = default(int);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.Tournament.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="GameDay"/> entities.
        /// </summary>
        [Association("Tournament_GameDay", "ID", "TournamentID")]
        [XmlIgnore()]
        public EntityCollection<GameDay> GameDay
        {
            get
            {
                if ((this._gameDay == null))
                {
                    this._gameDay = new EntityCollection<GameDay>(this, "GameDay", this.FilterGameDay, this.AttachGameDay, this.DetachGameDay);
                }
                return this._gameDay;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegistrationAmount' value.
        /// </summary>
        [DataMember()]
        public decimal RegistrationAmount
        {
            get
            {
                return this._registrationAmount;
            }
            set
            {
                if ((this._registrationAmount != value))
                {
                    this.OnRegistrationAmountChanging(value);
                    this.RaiseDataMemberChanging("RegistrationAmount");
                    this.ValidateProperty("RegistrationAmount", value);
                    this._registrationAmount = value;
                    this.RaiseDataMemberChanged("RegistrationAmount");
                    this.OnRegistrationAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RegistrationPayments"/> entities.
        /// </summary>
        [Association("Tournament_RegistrationPayments", "ID", "TournamentID")]
        [XmlIgnore()]
        public EntityCollection<RegistrationPayments> RegistrationPayments
        {
            get
            {
                if ((this._registrationPayments == null))
                {
                    this._registrationPayments = new EntityCollection<RegistrationPayments>(this, "RegistrationPayments", this.FilterRegistrationPayments, this.AttachRegistrationPayments, this.DetachRegistrationPayments);
                }
                return this._registrationPayments;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        public DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.Id == this.CategoryID);
        }
        
        private void AttachGameDay(GameDay entity)
        {
            entity.Tournament = this;
        }
        
        private void DetachGameDay(GameDay entity)
        {
            entity.Tournament = null;
        }
        
        private bool FilterGameDay(GameDay entity)
        {
            return (entity.TournamentID == this.ID);
        }
        
        private void AttachRegistrationPayments(RegistrationPayments entity)
        {
            entity.Tournament = this;
        }
        
        private void DetachRegistrationPayments(RegistrationPayments entity)
        {
            entity.Tournament = null;
        }
        
        private bool FilterRegistrationPayments(RegistrationPayments entity)
        {
            return (entity.TournamentID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SoccerChampionship.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'UserRegistrationService' domain service.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("SoccerChampionship-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace SoccerChampionship.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using SoccerChampionship.Web;
    
    
    /// <summary>
    /// The domain context corresponding to the 'SoccerModelService' domain service.
    /// </summary>
    public sealed partial class SoccerModelContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SoccerModelContext"/> class.
        /// </summary>
        public SoccerModelContext() : 
                this(new WebDomainClient<ISoccerModelServiceContract>(new Uri("SoccerChampionship-Web-Services-SoccerModelService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SoccerModelContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SoccerModelService service URI.</param>
        public SoccerModelContext(Uri serviceUri) : 
                this(new WebDomainClient<ISoccerModelServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SoccerModelContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SoccerModelContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Game"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<Game> Games
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Game>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="GameDay"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<GameDay> GameDays
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GameDay>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="GamePayments"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<GamePayments> GamePayments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GamePayments>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Player"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<Player> Players
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Player>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PlayerStatics"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<PlayerStatics> PlayerStatics
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PlayerStatics>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationPayments"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationPayments> RegistrationPayments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationPayments>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Team"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<Team> Teams
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Team>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Tournament"/> entities that have been loaded into this <see cref="SoccerModelContext"/> instance.
        /// </summary>
        public EntitySet<Tournament> Tournaments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Tournament>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entities using the 'GetCategory' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entities.</returns>
        public EntityQuery<Category> GetCategoryQuery()
        {
            this.ValidateMethod("GetCategoryQuery", null);
            return base.CreateQuery<Category>("GetCategory", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Game"/> entities using the 'GetGame' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Game"/> entities.</returns>
        public EntityQuery<Game> GetGameQuery()
        {
            this.ValidateMethod("GetGameQuery", null);
            return base.CreateQuery<Game>("GetGame", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GameDay"/> entities using the 'GetGameDay' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GameDay"/> entities.</returns>
        public EntityQuery<GameDay> GetGameDayQuery()
        {
            this.ValidateMethod("GetGameDayQuery", null);
            return base.CreateQuery<GameDay>("GetGameDay", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GamePayments"/> entities using the 'GetGamePayments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GamePayments"/> entities.</returns>
        public EntityQuery<GamePayments> GetGamePaymentsQuery()
        {
            this.ValidateMethod("GetGamePaymentsQuery", null);
            return base.CreateQuery<GamePayments>("GetGamePayments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Player"/> entities using the 'GetPlayer' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Player"/> entities.</returns>
        public EntityQuery<Player> GetPlayerQuery()
        {
            this.ValidateMethod("GetPlayerQuery", null);
            return base.CreateQuery<Player>("GetPlayer", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PlayerStatics"/> entities using the 'GetPlayerStatics' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PlayerStatics"/> entities.</returns>
        public EntityQuery<PlayerStatics> GetPlayerStaticsQuery()
        {
            this.ValidateMethod("GetPlayerStaticsQuery", null);
            return base.CreateQuery<PlayerStatics>("GetPlayerStatics", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationPayments"/> entities using the 'GetRegistrationPayments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationPayments"/> entities.</returns>
        public EntityQuery<RegistrationPayments> GetRegistrationPaymentsQuery()
        {
            this.ValidateMethod("GetRegistrationPaymentsQuery", null);
            return base.CreateQuery<RegistrationPayments>("GetRegistrationPayments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Team"/> entities using the 'GetTeam' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Team"/> entities.</returns>
        public EntityQuery<Team> GetTeamQuery()
        {
            this.ValidateMethod("GetTeamQuery", null);
            return base.CreateQuery<Team>("GetTeam", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Tournament"/> entities using the 'GetTournament' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Tournament"/> entities.</returns>
        public EntityQuery<Tournament> GetTournamentQuery()
        {
            this.ValidateMethod("GetTournamentQuery", null);
            return base.CreateQuery<Tournament>("GetTournament", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SoccerModelContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SoccerModelService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISoccerModelServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategory' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetCategoryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetCategory", ReplyAction="http://tempuri.org/SoccerModelService/GetCategoryResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategory(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategory'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategory'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategory' operation.</returns>
            QueryResult<Category> EndGetCategory(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGame' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetGameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetGame", ReplyAction="http://tempuri.org/SoccerModelService/GetGameResponse")]
            [WebGet()]
            IAsyncResult BeginGetGame(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGame'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGame'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGame' operation.</returns>
            QueryResult<Game> EndGetGame(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGameDay' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetGameDayDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetGameDay", ReplyAction="http://tempuri.org/SoccerModelService/GetGameDayResponse")]
            [WebGet()]
            IAsyncResult BeginGetGameDay(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGameDay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGameDay'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGameDay' operation.</returns>
            QueryResult<GameDay> EndGetGameDay(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGamePayments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetGamePaymentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetGamePayments", ReplyAction="http://tempuri.org/SoccerModelService/GetGamePaymentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetGamePayments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGamePayments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGamePayments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGamePayments' operation.</returns>
            QueryResult<GamePayments> EndGetGamePayments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPlayer' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetPlayerDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetPlayer", ReplyAction="http://tempuri.org/SoccerModelService/GetPlayerResponse")]
            [WebGet()]
            IAsyncResult BeginGetPlayer(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPlayer'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPlayer'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPlayer' operation.</returns>
            QueryResult<Player> EndGetPlayer(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPlayerStatics' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetPlayerStaticsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetPlayerStatics", ReplyAction="http://tempuri.org/SoccerModelService/GetPlayerStaticsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPlayerStatics(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPlayerStatics'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPlayerStatics'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPlayerStatics' operation.</returns>
            QueryResult<PlayerStatics> EndGetPlayerStatics(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegistrationPayments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetRegistrationPaymentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetRegistrationPayments", ReplyAction="http://tempuri.org/SoccerModelService/GetRegistrationPaymentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegistrationPayments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegistrationPayments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegistrationPayments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegistrationPayments' operation.</returns>
            QueryResult<RegistrationPayments> EndGetRegistrationPayments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTeam' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetTeamDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetTeam", ReplyAction="http://tempuri.org/SoccerModelService/GetTeamResponse")]
            [WebGet()]
            IAsyncResult BeginGetTeam(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTeam'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTeam'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTeam' operation.</returns>
            QueryResult<Team> EndGetTeam(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTournament' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/GetTournamentDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/GetTournament", ReplyAction="http://tempuri.org/SoccerModelService/GetTournamentResponse")]
            [WebGet()]
            IAsyncResult BeginGetTournament(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTournament'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTournament'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTournament' operation.</returns>
            QueryResult<Tournament> EndGetTournament(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SoccerModelService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SoccerModelService/SubmitChanges", ReplyAction="http://tempuri.org/SoccerModelService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SoccerModelContextEntityContainer : EntityContainer
        {
            
            public SoccerModelContextEntityContainer()
            {
                this.CreateEntitySet<Category>(EntitySetOperations.All);
                this.CreateEntitySet<Game>(EntitySetOperations.All);
                this.CreateEntitySet<GameDay>(EntitySetOperations.All);
                this.CreateEntitySet<GamePayments>(EntitySetOperations.All);
                this.CreateEntitySet<Player>(EntitySetOperations.All);
                this.CreateEntitySet<PlayerStatics>(EntitySetOperations.All);
                this.CreateEntitySet<RegistrationPayments>(EntitySetOperations.All);
                this.CreateEntitySet<Team>(EntitySetOperations.All);
                this.CreateEntitySet<Tournament>(EntitySetOperations.All);
            }
        }
    }
}
